[
  {
    "number": 1,
    "emoji": "üóÑÔ∏è",
    "title": "O que √© Banco de Dados?",
    "color": "blue",
    "commands": [
      {
        "cmd": "Defini√ß√£o",
        "desc": "Banco de dados √© um sistema especializado para armazenar, organizar e recuperar informa√ß√µes com efici√™ncia e seguran√ßa. Ele √© fundamental para aplica√ß√µes modernas, permitindo a persist√™ncia de dados e a execu√ß√£o de opera√ß√µes como inser√ß√£o, consulta, atualiza√ß√£o e exclus√£o (CRUD)."
      },
      {
        "cmd": "Import√¢ncia",
        "desc": "Garante integridade e disponibilidade dos dados em sistemas cr√≠ticos, como bancos, hospitais e redes sociais, al√©m de proteger contra falhas e acessos n√£o autorizados."
      }
    ]
  },
  {
    "number": 2,
    "emoji": "üî¢",
    "title": "Tipos de Banco de Dados",
    "color": "green",
    "commands": [
      {
        "cmd": "Relacional (SQL)",
        "desc": "Organiza os dados em tabelas com linhas e colunas. Utiliza SQL como linguagem padr√£o para manipular dados, garantindo integridade com constraints e relacionamentos bem definidos.",
        "exemplos": ["MySQL", "PostgreSQL", "SQLite", "SQL Server"]
      },
      {
        "cmd": "N√£o Relacional (NoSQL)",
        "desc": "Armazena dados em formatos variados como documentos, chave-valor, colunas ou grafos. Foco em escalabilidade, desempenho e flexibilidade para lidar com grandes volumes de dados semi ou n√£o estruturados.",
        "exemplos": ["MongoDB", "Redis", "Cassandra", "Neo4j"]
      }
    ]
  },
  {
    "number": 3,
    "emoji": "üìã",
    "title": "Conceitos B√°sicos",
    "color": "orange",
    "commands": [
      {
        "cmd": "Tabela",
        "desc": "Estrutura fundamental em bancos relacionais. Organiza dados em registros (linhas) e atributos (colunas), cada um representando uma entidade e suas caracter√≠sticas."
      },
      {
        "cmd": "Documento",
        "desc": "Modelo usado em bancos NoSQL baseados em documentos. Estrutura flex√≠vel, semelhante a objetos JSON, ideal para armazenar informa√ß√µes complexas e aninhadas."
      },
      {
        "cmd": "Chave Prim√°ria",
        "desc": "Campo que identifica unicamente cada registro em uma tabela, essencial para evitar duplica√ß√µes e criar rela√ß√µes entre tabelas atrav√©s de chaves estrangeiras."
      },
      {
        "cmd": "Consulta (Query)",
        "desc": "Instru√ß√£o que permite buscar, inserir, alterar ou excluir dados no banco. Pode variar de simples consultas a complexas jun√ß√µes e agrega√ß√µes de m√∫ltiplas tabelas."
      }
    ]
  },
  {
    "number": 4,
    "emoji": "üíæ",
    "title": "Exemplo b√°sico em SQL",
    "color": "purple",
    "commands": [
      {
        "cmd": "SQL Exemplo",
        "desc": "```sql\nCREATE TABLE usuarios (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  nome VARCHAR(100) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n);\n\nINSERT INTO usuarios (nome, email) VALUES ('Jo√£o', 'joao@email.com');\n\nSELECT * FROM usuarios;\n```"
      },
      {
        "cmd": "Explica√ß√£o",
        "desc": "O comando `CREATE TABLE` cria a tabela 'usuarios' com colunas: id (chave prim√°ria), nome e email. `INSERT` adiciona um registro, e `SELECT` recupera todos os dados. A cl√°usula `UNIQUE` impede emails repetidos e `AUTO_INCREMENT` gera automaticamente valores √∫nicos para id."
      }
    ]
  },
  {
    "number": 5,
    "emoji": "üì¶",
    "title": "Exemplo b√°sico em MongoDB",
    "color": "red",
    "commands": [
      {
        "cmd": "MongoDB Exemplo",
        "desc": "```js\ndb.usuarios.insertOne({ nome: 'Maria', email: 'maria@email.com' });\ndb.usuarios.find({});\n```"
      },
      {
        "cmd": "Explica√ß√£o",
        "desc": "Em MongoDB, cole√ß√µes armazenam documentos JSON. O comando `insertOne` adiciona um documento √† cole√ß√£o 'usuarios'. `find` recupera todos os documentos. MongoDB √© schema-less, permitindo documentos com diferentes estruturas na mesma cole√ß√£o."
      }
    ]
  },
  {
    "number": 6,
    "emoji": "üîê",
    "title": "Transa√ß√µes e Integridade",
    "color": "teal",
    "commands": [
      {
        "cmd": "Transa√ß√µes",
        "desc": "Conjunto de opera√ß√µes que devem ser executadas como uma unidade at√¥mica: ou todas s√£o conclu√≠das, ou nenhuma. Isso garante que o banco mantenha consist√™ncia, mesmo em falhas."
      },
      {
        "cmd": "ACID",
        "desc": "**Atomicidade**: tudo ou nada; **Consist√™ncia**: garante validade dos dados; **Isolamento**: opera√ß√µes simult√¢neas n√£o interferem; **Durabilidade**: dados persistem ap√≥s confirma√ß√£o."
      }
    ]
  },
  {
    "number": 7,
    "emoji": "‚ö°",
    "title": "√çndices",
    "color": "yellow",
    "commands": [
      {
        "cmd": "O que s√£o",
        "desc": "Estruturas auxiliares que aceleram consultas, permitindo localizar rapidamente dados sem escanear toda a tabela."
      },
      {
        "cmd": "Pr√≥s e Contras",
        "desc": "Melhoram desempenho de leitura, mas aumentam o custo de armazenamento e podem impactar negativamente opera√ß√µes de escrita, que precisam atualizar os √≠ndices."
      }
    ]
  },
  {
    "number": 8,
    "emoji": "üõ†Ô∏è",
    "title": "Ferramentas Populares",
    "color": "cyan",
    "commands": [
      {
        "cmd": "phpMyAdmin",
        "desc": "Interface web intuitiva para gerenciar bancos MySQL, realizando consultas, backups e visualiza√ß√£o de dados de forma gr√°fica."
      },
      {
        "cmd": "MongoDB Compass",
        "desc": "Ferramenta oficial do MongoDB com interface gr√°fica para explorar cole√ß√µes, executar queries e analisar o desempenho."
      },
      {
        "cmd": "pgAdmin",
        "desc": "Completa interface para PostgreSQL com recursos de modelagem de dados, execu√ß√£o de scripts SQL e monitoramento de desempenho."
      },
      {
        "cmd": "Redis CLI",
        "desc": "Ferramenta de linha de comando para intera√ß√£o com Redis, ideal para opera√ß√µes r√°pidas de cache e armazenamento chave-valor."
      },
      {
        "cmd": "DBeaver",
        "desc": "Plataforma universal para administra√ß√£o de m√∫ltiplos bancos SQL e NoSQL, com interface unificada e extens√≠vel."
      }
    ]
  },
  {
    "number": 9,
    "emoji": "üåê",
    "title": "Como conectar em um banco de dados",
    "color": "gray",
    "commands": [
      {
        "cmd": "Drivers e ORMs",
        "desc": "Drivers permitem a comunica√ß√£o direta com o banco, enquanto ORMs abstraem opera√ß√µes SQL para objetos e m√©todos, facilitando o desenvolvimento."
      },
      {
        "cmd": "Exemplos",
        "desc": "`mysql2` para MySQL em Node.js; `mongoose` para MongoDB com valida√ß√£o e modelagem; `pg` para PostgreSQL com suporte a consultas parametrizadas."
      }
    ]
  },
  {
    "number": 10,
    "emoji": "üìö",
    "title": "Recursos para aprender mais",
    "color": "gray",
    "commands": [
      {
        "cmd": "Documenta√ß√£o oficial",
        "desc": "Refer√™ncia prim√°ria e mais atualizada. Ex.: MySQL (https://dev.mysql.com/doc/) e MongoDB (https://www.mongodb.com/docs/)."
      },
      {
        "cmd": "Plataformas de cursos",
        "desc": "Udemy, Coursera, Alura e YouTube oferecem cursos desde introdu√ß√£o at√© t√≥picos avan√ßados, com aulas pr√°ticas e te√≥ricas."
      },
      {
        "cmd": "Livros",
        "desc": "Obras fundamentais: 'Database System Concepts' (Silberschatz), 'SQL For Dummies' para iniciantes e 'MongoDB: The Definitive Guide' para especialistas."
      },
      {
        "cmd": "Comunidades",
        "desc": "Participe de f√≥runs como Stack Overflow e grupos no Reddit para tirar d√∫vidas, compartilhar experi√™ncias e acompanhar tend√™ncias da √°rea."
      }
    ]
  }
]
