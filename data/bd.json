[
  {
    "number": 1,
    "emoji": "üóÑÔ∏è",
    "title": "O que √© Banco de Dados?",
    "color": "blue",
    "description": "Banco de dados √© um sistema especializado que permite armazenar, organizar e recuperar informa√ß√µes de maneira eficiente e segura. Ele √© projetado para lidar com grandes volumes de dados, assegurando a integridade, consist√™ncia e disponibilidade das informa√ß√µes. Al√©m disso, possibilita opera√ß√µes como inser√ß√£o, consulta, atualiza√ß√£o e exclus√£o (CRUD). Sistemas de banco de dados s√£o essenciais para aplica√ß√µes modernas, desde redes sociais at√© sistemas financeiros e de sa√∫de, garantindo que os dados sejam facilmente acess√≠veis e protegidos contra falhas ou acessos indevidos."
  },
  {
    "number": 2,
    "emoji": "üî¢",
    "title": "Tipos de Banco de Dados",
    "color": "green",
    "types": [
      {
        "name": "Relacional (SQL)",
        "description": "Os bancos de dados relacionais organizam informa√ß√µes em tabelas compostas por linhas (tamb√©m chamadas de registros) e colunas (atributos ou campos). As tabelas podem se relacionar entre si, permitindo a modelagem de sistemas complexos. O SQL (Structured Query Language) √© a linguagem padr√£o para manipula√ß√£o desses dados, oferecendo comandos para consultar, inserir, atualizar e excluir registros. Esse modelo √© ideal quando h√° necessidade de integridade e consist√™ncia elevadas, como em sistemas banc√°rios ou ERPs.",
        "exemplos": ["MySQL", "PostgreSQL", "SQLite", "SQL Server"]
      },
      {
        "name": "N√£o Relacional (NoSQL)",
        "description": "Bancos de dados NoSQL foram desenvolvidos para atender √†s demandas de aplica√ß√µes modernas que exigem escalabilidade, flexibilidade e desempenho. Eles n√£o seguem o modelo relacional e podem armazenar dados de diferentes formas: documentos (JSON, BSON), chave-valor, colunas amplas ou grafos. S√£o ideais para lidar com dados semi-estruturados ou n√£o estruturados, como perfis de usu√°rios, cat√°logos de produtos ou redes sociais, al√©m de aplica√ß√µes que precisam de alta disponibilidade e resposta r√°pida.",
        "exemplos": ["MongoDB", "Redis", "Cassandra", "Neo4j"]
      }
    ]
  },
  {
    "number": 3,
    "emoji": "üìã",
    "title": "Conceitos B√°sicos",
    "color": "orange",
    "concepts": [
      {
        "term": "Tabela",
        "definition": "Estrutura fundamental dos bancos relacionais, onde os dados s√£o organizados em linhas (registros) e colunas (atributos). Cada coluna define um tipo de dado, como texto, n√∫mero ou data, e cada linha representa uma inst√¢ncia de entidade, como um cliente ou pedido."
      },
      {
        "term": "Documento",
        "definition": "Estrutura usada em bancos NoSQL baseados em documentos. √â semelhante a um objeto JSON, onde os dados s√£o armazenados em pares chave-valor. Permite a modelagem de informa√ß√µes complexas com flexibilidade, como listas aninhadas e objetos compostos."
      },
      {
        "term": "Chave Prim√°ria",
        "definition": "Campo que identifica de maneira √∫nica cada registro em uma tabela relacional. Evita a duplica√ß√£o de registros e facilita a cria√ß√£o de relacionamentos entre tabelas atrav√©s de chaves estrangeiras."
      },
      {
        "term": "Consulta (Query)",
        "definition": "Comando que permite buscar, inserir, atualizar ou excluir dados no banco. Pode ser simples, como selecionar todos os registros, ou complexa, envolvendo m√∫ltiplas tabelas e filtros espec√≠ficos."
      }
    ]
  },
  {
    "number": 4,
    "emoji": "üíæ",
    "title": "Exemplo b√°sico em SQL",
    "color": "purple",
    "example": "CREATE TABLE usuarios (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  nome VARCHAR(100) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n);\n\nINSERT INTO usuarios (nome, email) VALUES ('Jo√£o', 'joao@email.com');\n\nSELECT * FROM usuarios;",
    "explanation": "O comando CREATE TABLE define uma nova tabela chamada 'usuarios' com tr√™s colunas: id, nome e email. O campo id √© configurado como chave prim√°ria e auto-incrementa automaticamente a cada inser√ß√£o. Os campos nome e email s√£o obrigat√≥rios (NOT NULL), sendo o email tamb√©m √∫nico (UNIQUE). O comando INSERT adiciona um novo registro e o SELECT recupera todos os registros armazenados."
  },
  {
    "number": 5,
    "emoji": "üì¶",
    "title": "Exemplo b√°sico em MongoDB",
    "color": "red",
    "example": "db.usuarios.insertOne({ nome: 'Maria', email: 'maria@email.com' });\n\ndb.usuarios.find({});",
    "explanation": "Em MongoDB, utilizamos cole√ß√µes em vez de tabelas e documentos em vez de registros. O comando insertOne adiciona um novo documento √† cole√ß√£o 'usuarios', contendo as chaves nome e email. J√° o comando find busca e retorna todos os documentos existentes na cole√ß√£o. MongoDB permite esquemas flex√≠veis, aceitando documentos com diferentes estruturas na mesma cole√ß√£o."
  },
  {
    "number": 6,
    "emoji": "üîê",
    "title": "Transa√ß√µes e Integridade",
    "color": "teal",
    "description": "Transa√ß√µes garantem que um conjunto de opera√ß√µes seja executado integralmente ou n√£o seja executado, preservando a integridade dos dados. O conceito ACID resume as propriedades essenciais:\n- **Atomicidade**: todas as opera√ß√µes s√£o conclu√≠das ou nenhuma.\n- **Consist√™ncia**: o banco evolui apenas entre estados v√°lidos.\n- **Isolamento**: opera√ß√µes concorrentes n√£o interferem entre si.\n- **Durabilidade**: ap√≥s a confirma√ß√£o, os dados s√£o preservados, mesmo em caso de falhas."
  },
  {
    "number": 7,
    "emoji": "‚ö°",
    "title": "√çndices",
    "color": "yellow",
    "description": "√çndices s√£o estruturas criadas para melhorar a velocidade das consultas em bancos de dados. Funcionam como √≠ndices em livros, permitindo localizar rapidamente informa√ß√µes sem a necessidade de varrer todos os registros. Contudo, embora acelerem consultas, os √≠ndices consomem espa√ßo adicional e podem impactar negativamente opera√ß√µes de inser√ß√£o, atualiza√ß√£o e dele√ß√£o, j√° que essas exigem a atualiza√ß√£o dos √≠ndices relacionados."
  },
  {
    "number": 8,
    "emoji": "üõ†Ô∏è",
    "title": "Ferramentas populares",
    "color": "cyan",
    "tools": [
      "phpMyAdmin: Interface web intuitiva para administrar bancos MySQL, permitindo consultas, backups e visualiza√ß√£o de dados.",
      "MongoDB Compass: Ferramenta gr√°fica oficial para explorar, consultar e analisar bancos MongoDB, ideal para iniciantes e especialistas.",
      "pgAdmin: Completa interface gr√°fica para gest√£o do PostgreSQL, oferecendo recursos de modelagem, monitoramento e execu√ß√£o de scripts SQL.",
      "Redis CLI: Ferramenta de linha de comando para intera√ß√£o r√°pida e direta com o Redis, ideal para opera√ß√µes de chave-valor e cache.",
      "DBeaver: Plataforma universal para administra√ß√£o de m√∫ltiplos bancos de dados, com suporte a SQL e NoSQL em uma interface unificada."
    ]
  },
  {
    "number": 9,
    "emoji": "üåê",
    "title": "Como conectar em um banco de dados",
    "color": "gray",
    "description": "A conex√£o com bancos de dados √© realizada por meio de bibliotecas espec√≠ficas, denominadas drivers ou ORMs (Object-Relational Mappers). Essas ferramentas facilitam a execu√ß√£o de comandos, a manipula√ß√£o de dados e o tratamento de erros de forma program√°tica. Por exemplo:\n- **mysql2**: driver para conex√£o com MySQL em Node.js.\n- **mongoose**: ORM para intera√ß√£o com bancos MongoDB, oferecendo valida√ß√£o, modelagem e hooks.\n- **pg**: driver oficial para PostgreSQL, simples e eficiente. \nCada linguagem possui bibliotecas espec√≠ficas para interagir com diferentes tipos de bancos de dados."
  },
  {
    "number": 10,
    "emoji": "üìö",
    "title": "Recursos para aprender mais",
    "color": "gray",
    "resources": [
      "Documenta√ß√£o oficial de cada banco de dados, como MySQL (https://dev.mysql.com/doc/) e MongoDB (https://www.mongodb.com/docs/).",
      "Plataformas de cursos online como Udemy, Coursera, Alura e YouTube, que oferecem desde introdu√ß√µes at√© t√≥picos avan√ßados.",
      "Livros cl√°ssicos como 'Database System Concepts' de Silberschatz, 'SQL For Dummies' para iniciantes e 'MongoDB: The Definitive Guide' para quem quer se aprofundar.",
      "Comunidades e f√≥runs como Stack Overflow, Reddit, e grupos especializados, √≥timos para tirar d√∫vidas, compartilhar experi√™ncias e acompanhar as novidades da √°rea."
    ]
  }
]
