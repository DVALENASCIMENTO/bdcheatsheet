[
  {
    "number": 1,
    "emoji": "üóÑÔ∏è",
    "title": "O que √© Banco de Dados?",
    "color": "blue",
    "description": "Banco de dados √© um sistema estruturado para armazenar, organizar, gerenciar e recuperar grandes volumes de dados de forma eficiente e segura. Eles permitem o acesso r√°pido e confi√°vel √† informa√ß√£o, suportando opera√ß√µes como inser√ß√£o, consulta, atualiza√ß√£o e exclus√£o. Bancos de dados s√£o essenciais para aplica√ß√µes modernas, garantindo integridade, consist√™ncia e disponibilidade dos dados."
  },
  {
    "number": 2,
    "emoji": "üî¢",
    "title": "Tipos de Banco de Dados",
    "color": "green",
    "types": [
      {
        "name": "Relacional (SQL)",
        "description": "Este modelo organiza os dados em tabelas compostas por linhas (registros) e colunas (atributos). Cada tabela possui uma chave prim√°ria que identifica unicamente cada registro. A manipula√ß√£o dos dados √© feita com a linguagem SQL (Structured Query Language), que permite consultas complexas, relacionamentos entre tabelas e garantias de integridade referencial. √â ideal para dados estruturados e transa√ß√µes que exigem alta consist√™ncia.",
        "exemplos": ["MySQL", "PostgreSQL", "SQLite", "SQL Server"]
      },
      {
        "name": "N√£o Relacional (NoSQL)",
        "description": "Projetados para oferecer maior flexibilidade e escalabilidade, bancos NoSQL armazenam dados em formatos variados, como documentos JSON/BSON, pares chave-valor, colunas largas ou grafos. S√£o indicados para dados semi-estruturados ou n√£o estruturados, al√©m de sistemas que demandam alta velocidade e disponibilidade. Diferentes tipos de NoSQL atendem a necessidades espec√≠ficas, como consultas r√°pidas, an√°lise de grafos ou armazenamento em cache.",
        "exemplos": ["MongoDB", "Redis", "Cassandra", "Neo4j"]
      }
    ]
  },
  {
    "number": 3,
    "emoji": "üìã",
    "title": "Conceitos B√°sicos",
    "color": "orange",
    "concepts": [
      {
        "term": "Tabela",
        "definition": "No modelo relacional, a tabela √© a estrutura fundamental que armazena os dados em linhas (registros) e colunas (campos). Cada coluna define um tipo de dado e regras espec√≠ficas, e cada linha representa uma entidade ou objeto com seus valores."
      },
      {
        "term": "Documento",
        "definition": "Em bancos NoSQL baseados em documentos, como MongoDB, um documento √© uma estrutura semelhante a JSON ou BSON que cont√©m dados organizados em pares chave-valor, podendo ser aninhados para representar estruturas complexas."
      },
      {
        "term": "Chave Prim√°ria",
        "definition": "√â um campo ou conjunto de campos que identificam unicamente cada registro em uma tabela relacional, garantindo que n√£o existam duplicatas e facilitando buscas e relacionamentos."
      },
      {
        "term": "Consulta (Query)",
        "definition": "Comando usado para buscar, inserir, atualizar ou deletar dados no banco. Consultas podem variar de simples sele√ß√µes a complexas jun√ß√µes e filtros, dependendo da linguagem e do banco."
      }
    ]
  },
  {
    "number": 4,
    "emoji": "üíæ",
    "title": "Exemplo b√°sico em SQL",
    "color": "purple",
    "example": "CREATE TABLE usuarios (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  nome VARCHAR(100) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n);\n\nINSERT INTO usuarios (nome, email) VALUES ('Jo√£o', 'joao@email.com');\n\nSELECT * FROM usuarios;\n\n-- Explica√ß√£o:\n-- CREATE TABLE define a tabela 'usuarios' com colunas e restri√ß√µes.\n-- id √© a chave prim√°ria auto-incrementada.\n-- nome e email s√£o campos obrigat√≥rios.\n-- INSERT adiciona um registro.\n-- SELECT recupera todos os registros da tabela."
  },
  {
    "number": 5,
    "emoji": "üì¶",
    "title": "Exemplo b√°sico em MongoDB",
    "color": "red",
    "example": "db.usuarios.insertOne({ nome: 'Maria', email: 'maria@email.com' });\n\n// Insere um documento JSON na cole√ß√£o 'usuarios'.\n\ndb.usuarios.find({});\n// Retorna todos os documentos da cole√ß√£o.\n\n// Explica√ß√£o:\n// MongoDB usa cole√ß√µes (semelhante a tabelas) e documentos (semelhante a linhas).\n// A estrutura √© flex√≠vel, permitindo campos vari√°veis entre documentos."
  },
  {
    "number": 6,
    "emoji": "üîê",
    "title": "Transa√ß√µes e Integridade",
    "color": "teal",
    "description": "Transa√ß√µes garantem que um conjunto de opera√ß√µes no banco de dados seja executado completamente ou n√£o seja aplicado, mantendo a integridade dos dados. Isso √© fundamental para evitar corrup√ß√£o e inconsist√™ncias. Caracter√≠sticas das transa√ß√µes s√£o resumidas no acr√¥nimo ACID:\n- Atomicidade: tudo ou nada.\n- Consist√™ncia: o banco passa de um estado v√°lido a outro.\n- Isolamento: opera√ß√µes concorrentes n√£o interferem.\n- Durabilidade: mudan√ßas persistem ap√≥s confirma√ß√£o."
  },
  {
    "number": 7,
    "emoji": "‚ö°",
    "title": "√çndices",
    "color": "yellow",
    "description": "√çndices s√£o estruturas especiais que o banco cria para acelerar a busca por dados, como um √≠ndice em um livro. Eles funcionam armazenando refer√™ncias ordenadas para dados em uma ou mais colunas, permitindo que consultas filtrem rapidamente os registros sem precisar escanear toda a tabela. Por√©m, √≠ndices tamb√©m ocupam espa√ßo e podem impactar a velocidade de inser√ß√£o e atualiza√ß√£o."
  },
  {
    "number": 8,
    "emoji": "üõ†Ô∏è",
    "title": "Ferramentas populares",
    "color": "cyan",
    "tools": [
      "phpMyAdmin (MySQL): Interface web para gerenciar bancos MySQL com facilidade, ideal para administradores e desenvolvedores iniciantes.",
      "MongoDB Compass: Interface gr√°fica oficial do MongoDB, para explorar dados, construir consultas e visualizar estat√≠sticas.",
      "pgAdmin (PostgreSQL): Ferramenta gr√°fica completa para administra√ß√£o e desenvolvimento com PostgreSQL.",
      "Redis CLI: Interface de linha de comando para intera√ß√£o r√°pida com bancos Redis, focados em chave-valor e cache.",
      "DBeaver (multi-banco): Plataforma universal para gerenciar diversos bancos de dados com interface √∫nica e suporte a SQL e NoSQL."
    ]
  },
  {
    "number": 9,
    "emoji": "üåê",
    "title": "Como conectar em um banco de dados",
    "color": "gray",
    "description": "Para interagir com bancos de dados, utilizamos bibliotecas espec√≠ficas para cada linguagem, chamadas drivers ou ORMs (Object-Relational Mappers). Por exemplo, em Node.js podemos usar:\n- mysql2 para MySQL;\n- mongoose para MongoDB;\n- pg para PostgreSQL.\nEstas bibliotecas facilitam a conex√£o, execu√ß√£o de comandos, tratamento de erros e manipula√ß√£o dos resultados de forma program√°tica."
  },
  {
    "number": 10,
    "emoji": "üìö",
    "title": "Recursos para aprender mais",
    "color": "gray",
    "resources": [
      "Documenta√ß√£o oficial dos bancos de dados (ex: https://dev.mysql.com/doc/, https://docs.mongodb.com/).",
      "Cursos online em plataformas como Udemy, Coursera, Alura, YouTube, que ensinam desde o b√°sico at√© t√≥picos avan√ßados.",
      "Livros renomados como 'Database System Concepts' de Silberschatz, 'SQL For Dummies' e 'MongoDB: The Definitive Guide'.",
      "Comunidades e f√≥runs como Stack Overflow, Reddit, e grupos especializados em bancos de dados para tirar d√∫vidas e acompanhar novidades."
    ]
  }
]
